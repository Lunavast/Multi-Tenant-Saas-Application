{"changed":true,"filter":false,"title":"index.js","tooltip":"/routes/index.js","value":"var express = require('express');\nvar router = express.Router();\nvar mysql = require('./mysql');\nvar bcrypt = require ('bcrypt');\nvar ses;\nvar mongojs = require('mongojs');\nvar db = mongojs('multitenant' , ['resource', 'task', 'project', 'Sprints']);\nvar tenantid;\nvar count = 1;\n\n/* GET home page. */\nrouter.get('/', function(req, res, next) {\n  res.render('signup');\n});\n\nrouter.get('/kanban', function(req, res, next) {\n  res.render('Kanban');\n});\n\nrouter.get('/signup', function(req, res, next) {\n  res.render('signup');\n});\n\nrouter.get('/waterfall', function(req, res) {\n  res.render('waterfall');\n});\n\nrouter.get('/resource', function(req, res) {\n  res.render('resource');\n});\n\nrouter.get('/kanbanrsc', function(req, res) {\n  res.render('kanbanrsc');\n});\n\nrouter.get('/story', function(req, res) {\n  res.render('story');\n});\n\nrouter.get('/sprint', function(req, res) {\n  res.render('sprint');\n});\nrouter.get('/previousCardAdd', function(req, res) {\n\tdb.task.find({tenantid : parseInt(tenantid) },function(err, docs){\n\t\tif(err){\n\t\t\tconsole.log(\"error\");\n\t\t\tthrow err;\n\t\t}\n\t\telse{\n\t\t\tconsole.log(res.body);\n\t\t\tres.send({'doc':docs,'tenantid' : tenantid});\n\t\t}\n\t});\n});\n\n\nrouter.get('/fetchCardNo', function(req, res) {\n\tdb.task.count({tenantid : parseInt(tenantid) },function(err, count){\n\t\tif(err){\n\t\t\tconsole.log(\"error\");\n\t\t\tthrow err;\n\t\t}\n\t\telse{\n\t\t\tconsole.log(count);\n\t\t\tconsole.log(\"There are \" + count + \" records.\");\n\t\t\tres.json(count);\n\t\t}\n\t});\n});\n\nrouter.post('/cardDetails', function(req, res) {\n\tdb.task.insert(req.body , function (err, doc) {\n\t\tif(err){\n\t\t\tconsole.log(\"error\");\n\t\t\tthrow err;\n\t\t}\n\t\telse{\n\t\t\tconsole.log(doc);\t\t\n\t\t\tres.json({\"docs\":doc});\n\t\t}\n\t});\n});\nrouter.get('/getResourceList', function(req, res) {\n\tdb.resource.find({tenantid : parseInt(tenantid) },function(err, docs){\n\t\tif(err){\n\t\t\tconsole.log(\"error\");\n\t\t\tthrow err;\n\t\t}\n\t\telse{\n\t\t\tres.send({'doc':docs,'tenantid' : tenantid});\n\t\t}\n\t});\n});\n\nrouter.get('/getTaskList', function(req, res) {\n\tdb.task.find({tenantid : parseInt(tenantid) },function(err, docs){\n\t\tif(err){\n\t\t\tconsole.log(\"error\");\n\t\t\tthrow err;\n\t\t}\n\t\telse{\n\t\t\tconsole.log(docs);\n\t\t\tres.send({'doc':docs,'tenantid' : tenantid});\n\t\t}\n\t});\n});\n\nrouter.get('/getSumOfPlanned', function(req, res) {\n\t\tdb.task.aggregate([\n                     { $match: { tenantid: tenantid } },\n                     { $group: { _id: \"$projectid\", total: { $sum: \"$plannedHours\" } } },\n                     { $sort: { total: -1 } }\n                   ],function(err, docs){\n\t\tif(err){\n\t\t\tconsole.log(\"error\");\n\t\t\tthrow err;\n\t\t}\n\t\telse{\n\t\t\tconsole.log(docs);\n\t\t\tres.json(docs);\n\t\t}\n\t});\n});\n\nrouter.get('/getSumOfActual', function(req, res) {\n\t\tdb.task.aggregate([\n                     { $match: { tenantid: tenantid } },\n                     { $group: { _id: \"$projectid\", total: { $sum: \"$actualHours\" } } },\n                     { $sort: { total: -1 } }\n                   ],function(err, docs){\n\t\tif(err){\n\t\t\tconsole.log(\"error\");\n\t\t\tthrow err;\n\t\t}\n\t\telse{\n\t\t\tconsole.log(docs);\n\t\t\tres.json(docs);\n\t\t}\n\t});\n});\n\nrouter.post('/checkResource', function(req, res) {\n\tconsole.log('check');\n\tdb.resource.find( { tenantid: parseInt(tenantid) , projectid : parseInt(req.body.projectid) , email: req.body.email} ,function(err, docs){\n\t\tif(err){\n\t\t\tconsole.log(\"error\");\n\t\t\tthrow err;\n\t\t}\n\t\telse{\n\t\t\tconsole.log('inside check'+docs);\n\t\t\tres.json(docs);\n\t\t}\n\t});\n});\n\nrouter.get('/getProjectDetails', function(req, res) {\n\tdb.project.find({tenantid : parseInt(tenantid) },function(err, docs){\n\t\tif(err){\n\t\t\tconsole.log(\"error\");\n\t\t\tthrow err;\n\t\t}\n\t\telse{\n\t\t\tconsole.log(docs);\n\t\t\tres.json(docs);\n\t\t}\n\t});\n});\n\n\nrouter.get('/logout', function(req, res){\n\tconsole.log(req.session.username);\n\t  req.session.destroy(function(err){\n\t\t  if(err){\n\t\t\t  console.log(err);\n\t\t\t  throw err;\n\t\t  }\n\t\t  else{\n\t\t\t  res.header('Cache-Control', 'no-cache, private, no-store, must-revalidate, max-stale=0, post-check=0, pre-check=0'); \n\t\t\t  res.redirect('/signup');\n\t\t  }\n\t  });\n});\n\nrouter.get('/getTechnology', function(req, res) {\n  var sqlGetTechnology = \"select * from TECHNOLOGY\"; \n\t//console.log(sqlGetTechnology);\n\tmysql.handle_database(function(err,results){\n\t\tif(err){\n\t\t\tconsole.log(\"error\");\n\t\t\tthrow err;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif(results.length > 0){\n\t\t\t\t//console.log(JSON.stringify(results));\n\t\t\t\t\tres.send({\"data\":results});\n\t\t\t\t}\n\t\t}\n\t},sqlGetTechnology);\n});\n\nrouter.post('/saversc', function(req, res) {\n\tdb.resource.insert(req.body , function (err, doc) {\n\t\tif(err){\n\t\t\tconsole.log(\"error\");\n\t\t\tthrow err;\n\t\t}\n\t\telse{\n\t\t\tres.json(doc);\n\t\t}\n\t});\n});\n\nrouter.post('/saveProject', function(req, res) {\n\tdb.project.insert(req.body, function (err, doc) {\n\t\tif(err){\n\t\t\tconsole.log(\"error\");\n\t\t\tthrow err;\n\t\t}\n\t\telse{\n\t\t\tres.json(doc);\n\t\t}\n\t});\n});\n\nrouter.post('/savetask', function(req, res) {\n\tdb.task.insert(req.body , function (err, doc) {\n\t\tif(err){\n\t\t\tconsole.log(\"error\");\n\t\t\tthrow err;\n\t\t}\n\t\telse{\n\t\t\tres.json(doc);\n\t\t}\n\t});\n});\n\nrouter.get('/deletersc/:id', function(req, res) {\n\tvar id = req.params.id;\n\tdb.resource.remove({_id: mongojs.ObjectId(id)},function (err,doc) {\n\t\tif(err){\n\t\t\tconsole.log(\"error\");\n\t\t\tthrow err;\n\t\t}\n\t\telse{\n\t\t\tres.json(doc);\n\t\t}\n\t});\n});\n\nrouter.get('/deletetask/:id', function(req, res) {\n\tvar id = req.params.id;\n\tdb.task.remove({_id: mongojs.ObjectId(id)},function (err,doc) {\n\t\tif(err){\n\t\t\tconsole.log(\"error\");\n\t\t\tthrow err;\n\t\t}\n\t\telse{\n\t\t\tres.json(doc);\n\t\t}\n\t});\n});\n\nrouter.get('/editrsc/:id', function(req, res) {\n\tvar id = req.params.id;\n\tdb.resource.findOne({_id: mongojs.ObjectId(id)},function (err,doc) {\n\t\tif(err){\n\t\t\tconsole.log(\"error\");\n\t\t\tthrow err;\n\t\t}\n\t\telse{\n\t\t\tres.json(doc);\n\t\t}\n\t});\n});\n\nrouter.get('/edittask/:id', function(req, res) {\n\tvar id = req.params.id;\n\tdb.task.findOne({_id: mongojs.ObjectId(id)},function (err,doc) {\n\t\tif(err){\n\t\t\tconsole.log(\"error\");\n\t\t\tthrow err;\n\t\t}\n\t\telse{\n\t\t\tconsole.log(doc);\n\t\t\tres.json(doc);\n\t\t}\n\t});\n});\n\nrouter.post('/updatersc/:id', function(req, res) {\n\tvar id = req.params.id;\n\tdb.resource.findAndModify({query: {_id: mongojs.ObjectId(id)},\n\t\tupdate:{$set : {name : req.body.name, email : req.body.email}},\n\t\tnew : true},function (err,doc) {\n\t\tif(err){\n\t\t\tconsole.log(\"error\");\n\t\t\tthrow err;\n\t\t}\n\t\telse{\n\t\t\tres.json(doc);\n\t\t}\n\t});\n});\n\nrouter.post('/updateProjectDetails/:tenantid', function(req, res) {\n\tvar id = parseInt(req.params.tenantid);\n\tconsole.log(id);\n\tdb.project.findAndModify({query: {tenantid: id},\n\t\tupdate:{$set : {projectname : req.body.projectname, projectstart : req.body.projectstart, projectend : req.body.projectend}},\n\t\tnew : true},function (err,doc) {\n\t\tif(err){\n\t\t\tconsole.log(\"error\");\n\t\t\tthrow err;\n\t\t}\n\t\telse{\n\t\t\tconsole.log(doc);\n\t\t\tres.json(doc);\n\t\t}\n\t});\n});\n\nrouter.post('/updatetask/:id', function(req, res) {\n\tvar id = req.params.id;\n\tdb.task.findAndModify({query: {_id: mongojs.ObjectId(id)},\n\t\tupdate:{$set : {name : req.body.name, plannedHours : req.body.plannedHours, startDate : req.body.startDate, endDate : req.body.endDate, resource : req.body.resource, comments : req.body.comments, actualHours : req.body.actualHours}},\n\t\tnew : true},function (err,doc) {\n\t\tif(err){\n\t\t\tconsole.log(\"error\");\n\t\t\tthrow err;\n\t\t}\n\t\telse{\n\t\t\tconsole.log(doc);\n\t\t\tres.json(doc);\n\t\t}\n\t});\n});\n\nrouter.post('/aftersignup', function(req, res) {\n\n\tvar sqlFindUser = \"select username from TENANT where username='\"+req.body.username+\"'\";\n\tconsole.log(\"Query is:\"+sqlFindUser);\n\t\n\tmysql.handle_database(function(err,results){\n\t\tif(err){\n\t\t\tconsole.log(\"error\");\n\t\t\tthrow err;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif(results.length > 0){\n\t\t\t\tconsole.log(\"User alreasy exists\");\n\t\t\t\tres.send({\"signup\":\"Fail\"});\n\t\t\t}\n\t\t\telse{    \n\t\t\t\tconsole.log(\"New user\");\n\t\t\t\tbcrypt.genSalt(10, function(err, salt) {\n\t\t\t\t    bcrypt.hash(req.body.password, salt, function(err, hash) {\n\t\t\t\t    \tvar sqlNewUser = \"insert into TENANT (firstName,lastName,username,password,type) values ('\"+req.body.firstname+\"','\"+req.body.lastname+\"','\"+req.body.username+\"','\"+hash+\"','\"+req.body.type+\"')\";\n\t\t\t\t\t\t\tconsole.log(\"Query is:\"+sqlNewUser);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tmysql.handle_database(function(err,results){\n\t\t\t\t\t\t\tconsole.log(\"inside\");\n\t\t\t\t\t\t\tif(err){\n\t\t\t\t\t\t\t\tconsole.log(\"error\");\n\t\t\t\t\t\t\t\tthrow err;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tses=req.session;\n\t\t\t\t    \t\tses.username=req.body.username;\n\t\t\t\t    \t\ttenantid = results.insertId;\n\t\t\t\t    \t\tconsole.log('signup tenant'+ tenantid);\n\t\t\t\t    \t\tconsole.log(ses.username + \"is session username\");\n\t\t\t\t    \t\tif(req.body.type == 1){\n\t\t\t\t    \t\t\tres.send({\"signup\":\"Waterfall\"});\n\t\t\t\t    \t\t}\n\t\t\t\t    \t\telse if(req.body.type == 2){\n\t\t\t\t    \t\t\tres.send({\"signup\":\"Scrum\"});\n\t\t\t\t    \t\t}\n\t\t\t\t    \t\telse if(req.body.type == 3){\n\t\t\t\t    \t\t\tres.send({\"signup\":\"Kanban\"});\n\t\t\t\t    \t\t}\n\t\t\t\t\t\t\t},sqlNewUser);\n\t\t\t\t    });\n\t\t\t\t\t});\n\t\t\t\tconsole.log(\"User added\");\n\t\t\t\t}\n\t\t}\n\t},sqlFindUser);\n});\n\nrouter.post('/afterlogin', function(req, res) {\n\tvar sqlFindUser = \"select username,tenantId from TENANT where username='\"+req.body.username+\"'\";\n\tconsole.log(\"Query is:\"+sqlFindUser);\n\tmysql.handle_database(function(err,results){\n\t\tif(err){\n\t\t\tconsole.log(\"error\");\n\t\t\tthrow err;\n\t\t}\n\t\telse{\n\t\t\tconsole.log(results);\n\t\t\tif(results.length > 0){\n\t\t\t\ttenantid = results[0].tenantId;\n\t\t\t\tvar sqlGetPassword = \"select password from TENANT where username='\"+req.body.username+\"'\";\n\t\t\t\tconsole.log(\"Query is:\"+sqlGetPassword);\n\t\t\t\t\n\t\t\t\tmysql.handle_database(function(err,results){\n\t\t\t\t\tif(err){\n\t\t\t\t\t\tconsole.log(\"error\");\n\t\t\t\t\t\tthrow err;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tconsole.log(\"results\"+results);\n\t\t\t\t\t\t bcrypt.compare(req.body.password, results[0].password, function(err, response) {\n\t\t\t\t\t\t    \tconsole.log(\"output is \" +response);\n\t\t\t\t\t\t    \tif(response){\n\t\t\t\t\t\t    \t\tses=req.session;\n\t\t\t\t\t\t    \t\tses.username=req.body.username;\n\t\t\t\t\t\t    \t\tconsole.log(ses.username + \"is session username\");\n\t\t\t\t\t\t    \t\tif(req.body.type == 1){\n\t\t\t\t\t\t    \t\t\tres.send({\"login\":\"Waterfall\"});\n\t\t\t\t\t\t    \t\t}\n\t\t\t\t\t\t    \t\telse if(req.body.type == 2){\n\t\t\t\t\t\t    \t\t\tres.send({\"login\":\"Scrum\"});\n\t\t\t\t\t\t    \t\t}\n\t\t\t\t\t\t    \t\telse if(req.body.type == 3){\n\t\t\t\t\t\t    \t\t\tres.send({\"login\":\"Kanban\"});\n\t\t\t\t\t\t    \t\t}\n\t\t\t\t\t\t    \t}\n\t\t\t\t\t\t    \telse{\n\t\t\t\t\t\t    \t\tconsole.log(\"InValid user\");\n\t\t\t\t\t\t\t\t\t\tres.send({\"login\":\"Fail\"});\n\t\t\t\t\t\t    \t}\n\t\t\t\t\t\t    });\n\t\t\t\t\t}\n\t\t\t\t},sqlGetPassword);\t\t\n\t\t\t}\n\t\t\telse {  \n\t\t\t\tconsole.log(\"InValid user\");\n\t\t\t\tres.send({\"login\":\"Fail\"});\n\t\t\t}\n\t\t}\n\t},sqlFindUser);\n});\n\n//get all user stories\nrouter.get('/userStoryList', function (req, res) {\n\t//below log prints to windows cmd prompt console\n\t//console.log(\"I received a GET request\");\n\tdb.task.find({tenantId : parseInt(tenantid) }, function(err, docs){\n    res.json(docs);\n\t});\t\n});\n\n//get the distinct sprintIds\nrouter.get('/sprintIdList', function (req, res) {\n\tdb.Sprints.find({tenantId: tenantid},function(err, docs) {\n\t\tres.json(docs);\n\t});\t\n});\n\n//add new Sprint\nrouter.post('/sprintIdList', function (req, res) {\n\t//add the sprinId, sprintStatus and expectedPoints for the sprint dynamically.\n\treq.body.sprintId = 'Sprint ' + (count);\n\treq.body.sprintExpectedPoints = (req.body[\"days\"]) * (req.body[\"teamSize\"] * 3);\n\treq.body.sprintStatus = 0; \n    req.body.tenantId = parseInt(tenantid);\n\t//console.log(\"SprintId: \" + req.body.sprintId + \"; count: \" + count + \"; sprintStatus: \" + req.body.sprintStatus + \"; expectedPoints: \" + req.body.sprintExpectedPoints);\n\tcount++;\n\tif(req.body.teamSize > 0) {\n\t\t\t//using standard velocity per person per day = 3\n\t\t\tdb.Sprints.insert(req.body, function(err, doc) {\n\t\t\t\tres.json(doc);\n\t\t\t});\n\t}\n});\n\n//to get the user stories based on sprintId\nrouter.get('/sprintStoryList/:sprintId', function (req, res) {\n\tdb.task.find({tenantId : parseInt(tenantid),\"sprintId\": req.params.sprintId}, function(err, docs){\n\t\tres.json(docs);\n\t});\t\n});\n\n//add story\nrouter.post('/userStoryList', function (req, res) {\t\n\treq.body.userStoryStatus = 0;\n  req.body.tenantId = parseInt(tenantid);\n\tdb.task.insert(req.body, function(err, doc) {\n\t\tres.json(doc);\n\t});\n});\n\n//delete story\nrouter.delete('/userStoryList/:id', function(req, res) {\n\tvar id = req.params.id;\n\tdb.task.remove({_id: mongojs.ObjectId(id)}, function(err, doc) {\n\t\tres.json(doc);\n\t});\n});\n\n//edit story\nrouter.get('/userStoryList/:id', function(req,res) {\n\tvar id = req.params.id;\n\tdb.task.findOne({_id: mongojs.ObjectId(id)}, function(err, doc) {\n\t\tres.json(doc);\n\t});\n});\n\n//update user story\nrouter.put('/userStoryList/:id', function(req,res) {\n\tvar id = req.params.id;\n\tdb.task.findAndModify({query: {_id: mongojs.ObjectId(id)}, \n\t\tupdate: {$set: { userStory: req.body.userStory, acceptanceCriteria: req.body.acceptanceCriteria, comments: req.body.comments, \n\t\tpoints: req.body.points, sprintId: req.body.sprintId}}},\n\t\tfunction(err, doc) {\n\t\t\tres.json(doc);\n\t\t});\n});\n\n//mark sprint complete -->update corresponding userStories to completed; i.e. userStoryStatus = 2; and corresponding sprintStatus = 2.\nrouter.put('/:sprintId', function(req,res) {\n\tvar errStep1 = null;\n\tdb.task.update({\"sprintId\": req.params.sprintId}, { $set: {userStoryStatus: 2}},{multi: true}, \n\t\tfunction(err, doc) {\n\t\t\terrStep1 = err;\n\t\t\tif (err)\n\t\t\t\tres.status(404).send('Failed to update task, error: ' + err);\n\t\t});\n\tif (!errStep1)\n\t\tdb.Sprints.update({\"sprintId\": req.params.sprintId}, { $set: {sprintStatus: 2}},{multi: true}, \n\t\t\tfunction(err,doc) {\n\t\t\t\tif (err)\n\t\t\t\t\tres.status(404).send('Failed to update Sprints, error: ' + err);\n\t\t\t\telse\n\t\t\t\t\tres.json(doc);\n\t\t\t});\n});\n\n//calculate the actual points of a sprint.\nrouter.get('/actualPoints', function(req,res) {\n\tvar errStep1 = null;\n\tvar pts = {\"foo\": 1};\n\tdb.task.aggregate(\n   [\n        {$match : {tenantId: parseInt(tenantid)}},\n        {$group : {\n           _id : null,\n           total: { $sum:  \"$points\"  }\n        }}\n   ], function(err, doc) {\n   \t\terrStep1 = err;\n      console.log(\"err:\" + err + \"errStep1: \" + errStep1);\n   \t\tif(!err) {\n   \t\t\t// console.log(\"step1 doc format\");\n   \t\t\t// console.log(doc);\n   \t\t\t// console.log(\"Pts in Step 1-1: before:\");\n   \t\t\t// console.log(pts);\n   \t\t\tpts = doc;\n   \t\t\t// console.log(\"Pts in Step 1-2: before:\");\n   \t\t\t// console.log(pts);\n   \t\t\t//this if-else block handles doc[0] undefined error\n   \t\t\tif(doc[0]) {\n   \t\t\t\tpts[0].actualPoints = doc[0].total;\n   \t\t\t\t// console.log(\"Pts in Step1: after:\");\n   \t\t\t\t// console.log(pts);\n   \t\t\t}\n   \t\t\t//else executes when there is no doc[0]--> meaning, there are no records in task collection.\n   \t\t\telse { \n   \t\t\t\tpts.actualPoints = 0; \n   \t\t\t\t// console.log(\"Pts in Step1: after:\");\n   \t\t\t\t// console.log(pts);\n   \t\t\t}\n\t   \t}\n\t   \telse {\n\t   \t\tres.status(404).send('Failed to fetch actual points, error: ' + err);\n\t   \t\t//console.log(\"response sent from step 1\");\n\t   \t}\n   });\n\tif(!errStep1) {\n\t\tdb.Sprints.aggregate(\n   \t\t[\n            {$match : {tenantId: parseInt(tenantid)}},\n        \t\t{$group : {\n           \t\t\t_id : null,\n           \t\t\ttotal: { $sum:  \"$sprintExpectedPoints\"  }\n      \t\t}}\n   \t\t], function(err, doc) {\n   \t\t\tif(!err) {\n   \t\t\t\t// console.log(\"step2 doc format\");\n   \t\t\t\t// console.log(doc);\n   \t\t\t\t// console.log(\"Pts in Step2: before:\");\n   \t\t\t\t// console.log(pts);\n   \t\t\t\t//this if condition handles pts[0] undefined error. This error occurs because of the async nature of nodejs. To repro the error, remove if condition.\n   \t\t\t\tif(!pts[0]) { \n   \t\t\t\t\tpts = doc;\n   \t\t\t\t} \n   \t\t\t\t//this if-else block handles doc[0] undefined error\n   \t\t\t\tif(doc[0]) {\n   \t\t\t\t\tpts[0].expectedPoints = doc[0].total;\n   \t\t\t\t\t// console.log(\"Step 2: after:\");\n   \t\t\t\t\t// console.log(pts);\n   \t\t\t\t\tres.json(pts);\n   \t\t\t\t\t// console.log(\"response sent from step # 2-1 \");\n   \t\t\t\t}\n   \t\t\t\t//else executes when there is no doc[0]--> meaning, there are no records in Sprints collection.\n   \t\t\t\telse { \n   \t\t\t\t\tpts.expectedPoints = 0; \n   \t\t\t\t\t// console.log(\"Step 2: after:\");\n   \t\t\t\t\t// console.log(pts);\n   \t\t\t\t\tres.json(pts); \n   \t\t\t\t\t// console.log(\"response sent from step # 2-2.\");\n   \t\t\t\t}\n   \t\t\t}\n   \t\t\telse {\n   \t\t\t\tres.status(404).send('Failed to fetch expected points, error: ' + err);\n   \t\t\t\t// console.log(\"response sent from step # 2-3 \");\n   \t\t\t}\n   \t\t});\n\t}\n});\n\nmodule.exports = router;\n","undoManager":{"mark":13,"position":11,"stack":[[{"start":{"row":142,"column":22},"end":{"row":143,"column":0},"action":"insert","lines":["",""],"id":0},{"start":{"row":143,"column":0},"end":{"row":143,"column":1},"action":"insert","lines":["\t"]}],[{"start":{"row":143,"column":1},"end":{"row":143,"column":16},"action":"insert","lines":["req.body.email,"],"id":1}],[{"start":{"row":143,"column":15},"end":{"row":143,"column":16},"action":"remove","lines":[","],"id":2}],[{"start":{"row":143,"column":1},"end":{"row":143,"column":12},"action":"insert","lines":["console.log"],"id":3}],[{"start":{"row":143,"column":12},"end":{"row":143,"column":13},"action":"insert","lines":["("],"id":4}],[{"start":{"row":143,"column":27},"end":{"row":143,"column":28},"action":"insert","lines":[")"],"id":5}],[{"start":{"row":143,"column":28},"end":{"row":143,"column":29},"action":"insert","lines":[";"],"id":6}],[{"start":{"row":141,"column":0},"end":{"row":154,"column":3},"action":"remove","lines":["router.post('/checkResource', function(req, res) {","\tconsole.log('check');","\tconsole.log(req.body.email);","\tdb.resource.find( { tenantid: parseInt(tenantid) , projectid : parseInt(req.body.projectid) , email: { $regex: req.body.email, $options: 'i' }} ,function(err, docs){","\t\tif(err){","\t\t\tconsole.log(\"error\");","\t\t\tthrow err;","\t\t}","\t\telse{","\t\t\tconsole.log('inside check'+docs);","\t\t\tres.json(docs);","\t\t}","\t});","});"],"id":7},{"start":{"row":141,"column":0},"end":{"row":153,"column":3},"action":"insert","lines":["router.post('/checkResource', function(req, res) {","\tconsole.log('check');","\tdb.resource.find( { tenantid: parseInt(tenantid) , projectid : parseInt(req.body.projectid) , email: { $regex: req.body.email, $options: 'i' }} ,function(err, docs){","\t\tif(err){","\t\t\tconsole.log(\"error\");","\t\t\tthrow err;","\t\t}","\t\telse{","\t\t\tconsole.log('inside check'+docs);","\t\t\tres.json(docs);","\t\t}","\t});","});"]}],[{"start":{"row":143,"column":104},"end":{"row":143,"column":112},"action":"remove","lines":["$regex: "],"id":8}],[{"start":{"row":143,"column":103},"end":{"row":143,"column":104},"action":"remove","lines":[" "],"id":9}],[{"start":{"row":143,"column":102},"end":{"row":143,"column":103},"action":"remove","lines":["{"],"id":10}],[{"start":{"row":143,"column":116},"end":{"row":143,"column":133},"action":"remove","lines":[", $options: 'i' }"],"id":11}],[{"start":{"row":470,"column":29},"end":{"row":470,"column":30},"action":"insert","lines":["r"],"id":12}],[{"start":{"row":470,"column":30},"end":{"row":470,"column":31},"action":"insert","lines":["s"],"id":13}]]},"ace":{"folds":[],"scrolltop":21,"scrollleft":0,"selection":{"start":{"row":64,"column":48},"end":{"row":64,"column":48},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":132,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1459782708000}